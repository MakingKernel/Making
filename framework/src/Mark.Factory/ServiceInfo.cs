// <auto-generated/>
// Service information data model for dependency injection
#nullable enable

using System.Collections.Generic;
using Microsoft.CodeAnalysis;

namespace Mark.Factory
{
    /// <summary>
    /// Service lifetime enumeration
    /// </summary>
    public enum ServiceLifetime
    {
        Singleton,
        Scoped,  
        Transient
    }

    /// <summary>
    /// Service registration type
    /// </summary>
    public enum ServiceRegistrationType
    {
        Basic,
        Factory,
        Keyed,
        Decorator,
        OpenGeneric,
        HostedService,
        Multiple
    }

    /// <summary>
    /// Comprehensive service information for registration
    /// </summary>
    public sealed class ServiceInfo
    {
        public string Namespace { get; set; } = string.Empty;
        public string ImplementationType { get; set; } = string.Empty;
        public string? ServiceType { get; set; }
        public ServiceLifetime Lifetime { get; set; }
        public ServiceRegistrationType RegistrationType { get; set; } = ServiceRegistrationType.Basic;
        
        // Factory method support
        public bool IsFactory { get; set; }
        public string? FactoryMethod { get; set; }
        
        // Keyed services support (.NET 8+)
        public bool IsKeyed { get; set; }
        public object? Key { get; set; }
        public string? KeyType { get; set; }
        
        // Decorator pattern support
        public bool IsDecorator { get; set; }
        public List<DecoratorInfo> Decorators { get; set; } = new();
        
        // Conditional registration
        public bool IsConditional { get; set; }
        public string? Condition { get; set; }
        
        // Open generics support
        public bool IsOpenGeneric { get; set; }
        
        // Multiple implementations
        public bool IsMultiple { get; set; }
        public bool ReplaceExisting { get; set; }
        
        // Hosted services
        public bool IsHostedService { get; set; }
        
        // Configuration support
        public bool HasConfiguration { get; set; }
        public string? ConfigurationKey { get; set; }
        
        // Priority ordering
        public int Priority { get; set; } = 0;
        
        // All attributes for advanced processing
        public List<AttributeData> AllAttributes { get; set; } = new();
    }

    /// <summary>
    /// Decorator information
    /// </summary>
    public sealed class DecoratorInfo
    {
        public string ServiceType { get; set; } = string.Empty;
        public int Order { get; set; } = 0;
    }
}