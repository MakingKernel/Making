// <auto-generated/>
// Diagnostic descriptors for dependency injection generator

using Microsoft.CodeAnalysis;

namespace Making.Factory
{
    /// <summary>
    /// Diagnostic descriptors for the dependency injection source generator
    /// </summary>
    internal static class DiagnosticDescriptors
    {
        private const string Category = "Making.Analyzers";

        // Error diagnostics
        public static readonly DiagnosticDescriptor MissingLifetimeAttribute = new(
            id: "MF0001",
            title: "Missing lifetime attribute",
            messageFormat: "Type '{0}' has dependency injection attributes but no lifetime attribute ([Singleton], [Scoped], or [Transient])",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true,
            description: "A type marked for dependency injection must have exactly one lifetime attribute.");

        public static readonly DiagnosticDescriptor MultipleLifetimeAttributes = new(
            id: "MF0002", 
            title: "Multiple lifetime attributes",
            messageFormat: "Type '{0}' has multiple lifetime attributes. Only one is allowed per type",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true,
            description: "A type can only have one lifetime attribute ([Singleton], [Scoped], or [Transient]).");

        public static readonly DiagnosticDescriptor InvalidFactoryMethod = new(
            id: "MF0003",
            title: "Invalid factory method",
            messageFormat: "Factory method '{0}' not found or invalid on type '{1}'",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true,
            description: "The specified factory method must be a static method that returns the service type.");

        public static readonly DiagnosticDescriptor AbstractTypeWithoutFactory = new(
            id: "MF0004",
            title: "Abstract type without factory",
            messageFormat: "Abstract type '{0}' cannot be registered without a factory method",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true,
            description: "Abstract classes and interfaces must use factory registration.");

        public static readonly DiagnosticDescriptor InvalidServiceType = new(
            id: "MF0005",
            title: "Invalid service type", 
            messageFormat: "Service type '{0}' is not assignable from implementation type '{1}'",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true,
            description: "The specified service type must be assignable from the implementation type.");

        public static readonly DiagnosticDescriptor InvalidKeyType = new(
            id: "MF0006",
            title: "Invalid key type",
            messageFormat: "Key type '{0}' is not supported for keyed services. Supported types: string, int, enum",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Error,  
            isEnabledByDefault: true,
            description: "Keyed services only support string, int, and enum key types.");

        public static readonly DiagnosticDescriptor CircularDependency = new(
            id: "MF0007",
            title: "Circular dependency detected",
            messageFormat: "Circular dependency detected in decorator chain for service '{0}'",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true,
            description: "Decorator chains cannot contain circular dependencies.");

        // Warning diagnostics
        public static readonly DiagnosticDescriptor NoPublicConstructor = new(
            id: "MF1001",
            title: "No public constructor",
            messageFormat: "Type '{0}' has no public constructors and may not be resolvable by DI container",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Warning,
            isEnabledByDefault: true,
            description: "Types registered for dependency injection should have at least one public constructor.");

        public static readonly DiagnosticDescriptor UnusedConfiguration = new(
            id: "MF1002",
            title: "Unused configuration key",
            messageFormat: "Configuration key '{0}' specified but no configuration binding found",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Warning,
            isEnabledByDefault: true,
            description: "Configuration keys should be used for actual configuration binding.");

        public static readonly DiagnosticDescriptor ConflictingRegistrations = new(
            id: "MF1003",
            title: "Conflicting service registrations",
            messageFormat: "Multiple registrations found for service type '{0}'. Last registration will be used",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Warning,
            isEnabledByDefault: true,
            description: "Multiple registrations for the same service type may cause unexpected behavior.");

        public static readonly DiagnosticDescriptor LegacyAttribute = new(
            id: "MF1004",
            title: "Legacy attribute usage",
            messageFormat: "Attribute '{0}' is deprecated. Consider using '{1}' instead",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Warning,
            isEnabledByDefault: true,
            description: "Some attributes have newer alternatives with better functionality.");

        // Info diagnostics  
        public static readonly DiagnosticDescriptor ServiceRegistered = new(
            id: "MF2001",
            title: "Service registered",
            messageFormat: "Service '{0}' registered as '{1}' with lifetime '{2}'",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Info,
            isEnabledByDefault: false,
            description: "Information about service registration for debugging purposes.");

        public static readonly DiagnosticDescriptor AutoInterfaceDetected = new(
            id: "MF2002",
            title: "Auto interface detected",
            messageFormat: "Interface '{0}' auto-detected for implementation '{1}'",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Info,
            isEnabledByDefault: false,
            description: "Information about automatically detected service interfaces.");

        public static readonly DiagnosticDescriptor ConditionalRegistration = new(
            id: "MF2003",
            title: "Conditional registration",
            messageFormat: "Service '{0}' registered conditionally for '{1}'",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Info,
            isEnabledByDefault: false,
            description: "Information about conditional service registrations.");
    }
}